# -*- coding: utf-8 -*-
"""Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15uI0nH4nuNBnoVo8PuGNrl8Ny3NCuPPw
"""

import numpy
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout, Input, BatchNormalization
from keras.constraints import maxnorm
from keras.models import Model
from keras.optimizers import SGD, Adam
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
K.common.image_dim_ordering()


# fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)

# Load data
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

# Normalize inputs from 0-255 to 0.0-1.0
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train = X_train / 255.0
X_test = X_test / 255.0

# One hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
type(y_test)


model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), padding='same', activation='relu', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))
model.add(MaxPooling2D(pool_size=(2, 2)))

#Flatten layer
model.add(Flatten())
model.add(Dropout(0.2))
model.add(Dense(1024, activation='relu', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))

# Compile model
epochs = 10
lrate = 0.001
decay = lrate/epochs
sgd = Adam(lr=lrate)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
print(model.summary())

#Fit the model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)

# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))
print(X_test.shape)


#Functional API

from keras.models import Model
from keras.layers import Input
api_input=Input(shape=X_train.shape[1:])
apimodel=Conv2D(32,(3,3),input_shape=(X_train.shape[1:]),padding="same",activation='relu')(api_input)
apimodel=Dropout(0.2)(apimodel)
apimodel=Conv2D(256, (3, 3), activation='relu', padding='same')(apimodel)
apimodel=Dropout(0.2)(apimodel)
apimodel=Conv2D(256, (3, 3), activation='relu', padding='same')(apimodel)
apimodel=(Dropout(0.2))(apimodel)
apimodel=Conv2D(256, (3, 3), activation='relu', padding='same')(apimodel)
apimodel=MaxPooling2D(pool_size=(2, 2))(apimodel)
apimodel=Dropout(0.5)(apimodel)
apimodel=Flatten()(apimodel)
apimodel=Dense(512, activation='relu',kernel_constraint=maxnorm(3))(apimodel)
apimodel=Dense(10, activation='softmax')(apimodel)

KERASX = Model(input=api_input,output=apimodel)

KERASX.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

KERASX.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)